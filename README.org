#+TITLE:     CLANSI
#+AUTHOR:    Larry Gouger
#+EMAIL:     (concat "lgouger" at-sign "bunimo.com")
#+DESCRIPTION: ANSI color and styling
#+LANGUAGE:  en

#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

** Installation

   Add this to your leiningen `project.clj` depedencies
   #+begin_src clojure
[com.bunimo/clansi "1.3.1-LPG-SNAPSHOT"]
   #+end_src

   ...or to your deps.edn...
   #+begin_src clojure
:deps {
    com.bunimo/clansi {:mvn/version "1.3.1-LPG-SNAPSHOT"}
}
   #+end_src

** Usage

   ANSI colorization helper functions for Clojure programs.

   You can call =(clansi/style-test-page)= to see what colors and styles are supported
   by your terminal.

   Wrap strings in ANSI color and style codes like this:

#+begin_src clojure
(style "foo bar" :red)

(style "foo bar" :underline)

(style "foo bar" :blue :bg-red :underline)
#+end_src

You can turn the production of ANSI codes on or off by rebinding the
=clansi.core/*use-ansi*= variable at runtime. This allows you to
maintain only one version of your code with the strings marked up for
color, and then turn ANSI on or off as desired, according to the
properties of each output device, user preference, execution context,
etc.

=(without-ansi)= and =(with-ansi)= convenience macros are provided for
this purpose:
#+begin_src clojure
(defn print-colorized [] 
  (println (style "foo bar" :red)))

(print-colorized) ;; prints "foo bar" in red
(without-ansi (print-colorized)) ;; prints plain "foo bar", without any ANSI color codes
(without-ansi (with-ansi (print-colorized)) (print-colorized)) ;; prints a red "foo bar", then a plaintext "foo bar"
#+end_src

** Deployment to Clojars

*** Update pom.xml
    [[https://juxt.pro/blog/pack-maven#_generate_a_pom_xml][Link to original blog post]]

    If no =pom.xml= exists use the following command to create it.
    #+begin_src sh
clojure -Spom
    #+end_src

    Once a =pom.xml= does exist, update the version in the file

*** Install the pack alias
    [[https://juxt.pro/blog/pack-maven#_install_the_pack_alias][Link to original blog post]]

    Run the following command to add the =:pack= alias to you =deps.edn= file.
    #+begin_src sh
clojure -Sdeps '{:deps {pack/pack.alpha {:git/url "https://github.com/juxt/pack.alpha.git" :sha "dccf2134bcf03726a9465d2b9997c42e5cd91bff"}}}' -m mach.pack.alpha.inject 'c70740ffc10805f34836da2160fa1899601fac02'
    #+end_src
    
*** Build your JAR
    [[https://juxt.pro/blog/pack-maven#_build_your_jar][Link to original blog post]]

    Use =pack='s skinny jar mode to create a jar that's suitable for upload to clojars.
    #+begin_src sh
clojure -A:pack mach.pack.alpha.skinny --no-libs --project-path clansi-1.3.1.jar
    #+end_src

*** Release the JAR using Deps Deploy
    [[https://juxt.pro/blog/pack-maven#deps_deploy][Link to original blog post]]

**** Add a =:deploy= alias that uses the =deps-deploy= library
     #+begin_src clojure
       {:aliases
         {:deploy {:extra-deps {deps-deploy {:mvn/version "RELEASE"}}
                   :main-opts ["-m" "deps-deploy.deps-deploy" "deploy" "clansi-1.3.1.jar"]}}
        }
     #+end_src
    
    
**** Invoke the :deploy alias
     #+begin_src sh
export HISTFILE=/dev/null(1)
CLOJARS_USERNAME=lgouger CLOJARS_PASSWORD=${CLOJARS_DEPLOYMENT_TOKEN} clojure -A:deploy
     #+end_src

** Bonus Features
*** call (clansi/colorize-docs) to make doc colorized
*** also supplies the color-doc macro, a stylized version of doc
